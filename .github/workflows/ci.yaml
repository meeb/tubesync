name: Run Django tests for TubeSync

env:
  IMAGE_NAME: tubesync

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --system --skip-lock
      - name: Set up Django environment
        run: cp tubesync/tubesync/local_settings.py.example tubesync/tubesync/local_settings.py
      - name: Run Django tests
        run: cd tubesync && python3 manage.py test --verbosity=2
  containerise:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.REGISTRY_ACCESS_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Lowercase github username for ghcr
        id: string
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.actor }}
      - name: Create cache directory on the runner
        run: |
          mkdir -v .cache
      - name: Start magic-wormhole services on the runner
        run: |
          sudo apt-get install python3-virtualenv
          TMPDIR="${XDG_RUNTIME_DIR:-/tmp}/temp"
          mkdir -v "${TMPDIR}" && export TMPDIR
          venv_dir="$(mktemp -d)" &&
              virtualenv "${venv_dir}" &&
              . "${venv_dir}"/bin/activate || exit
          pip install --upgrade pip
          pip install magic-wormhole magic-wormhole-mailbox-server magic-wormhole-transit-relay twisted
          # port 4000
          (mkdir -v "${TMPDIR}"/magic-wormhole-mailbox-server &&
              cd "${TMPDIR}"/magic-wormhole-mailbox-server &&
              exec twistd wormhole-mailbox --channel-db=channel.sqlite --usage-db=usage.sqlite --motd=TubeSync)
          # port 4001
          (mkdir -v "${TMPDIR}"/magic-wormhole-transit-relay &&
              cd "${TMPDIR}"/magic-wormhole-transit-relay &&
              exec twistd transitrelay)
          # determine the runner IP address
          _awk_prog='$0 !~ /scope host/ && "inet" == $1 {split($2, P, "/"); print P[1]; exit;}'
          runner_ip="$( ip addr sh | awk "${_awk_prog}" )"
          export runner_ip
          # receive the wheel directory
          (cd .cache ;
              printf -- '%s\n' "${runner_ip}" >| .ip
              printf -- '%s\n' "ws://${runner_ip}:4000/v1" >| .wormhole-relay
              printf -- '%s\n' "tcp:[${runner_ip}]:4001" >| .wormhole-transit
              wormhole --appid TubeSync --relay-url "$(< .wormhole-relay)" --transit-helper "$(< .wormhole-transit)" receive -a -c 3 --accept-file -o wheels >| receive.out 2>&1 &
              _pid=$!; sleep 1 && grep -e '^Allocated code:' receive.out | cut -d ' ' -f 3- > .wormhole-code &&
              rm -f receive.out && code="$(< .wormhole-code)" &&
              { while sleep 1; do
                  test -d /proc/${_pid} && continue ;
                  wormhole --appid TubeSync --relay-url "$(< .wormhole-relay)" --transit-helper "$(< .wormhole-transit)" receive --accept-file -o wheels "${code}" &
                  _pid=$!;
              done; } &)
      - name: Cache from tubesync stage
        uses: actions/cache@v4
        with:
          path: .cache/*
          key: docker-cache-tubesync
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ steps.string.outputs.lowercase }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=ghcr.io/${{ steps.string.outputs.lowercase }}/${{ env.IMAGE_NAME }}:latest
          cache-to: type=inline
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
