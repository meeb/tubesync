name: Release TubeSync

env:
  IMAGE_NAME: tubesync

on:
  release:
    types: [published]

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      ffmpeg-date: ${{ steps.jq.outputs.FFMPEG_DATE }}
      ffmpeg-releases: ${{ steps.ffmpeg.outputs.releases }}
      ffmpeg-version: ${{ steps.jq.outputs.FFMPEG_VERSION }}
      lowercase-github-actor: ${{ steps.github-actor.outputs.lowercase }}
      lowercase-github-repository_owner: ${{ steps.github-repository_owner.outputs.lowercase }}
      tag: ${{ steps.tag.outputs.tag }}
      ytdlp-latest-release: ${{ steps.yt-dlp.outputs.latest-release }}
      ytdlp-releases: ${{ steps.yt-dlp.outputs.releases }}
    steps:
      - uses: actions/checkout@v4
      - name: Get tag
        id: tag
        uses: ./.github/actions/get-tag
      - name: Lowercase github username
        id: github-actor
        uses: ./.github/actions/string-case
        with:
          string: ${{ github.actor }}
      - name: Lowercase github repository owner
        id: github-repository_owner
        uses: ./.github/actions/string-case
        with:
          string: ${{ github.repository_owner }}
      - name: Retrieve yt-dlp/FFmpeg-Builds releases with GitHub CLI
        id: ffmpeg
        uses: ./.github/actions/FFmpeg
      - name: Retrieve yt-dlp/yt-dlp releases with GitHub CLI
        id: yt-dlp
        uses: ./.github/actions/yt-dlp
      - name: Set outputs with jq
        id: jq
        run: |
          cat >| .ffmpeg.releases.json <<'EOF'
          ${{ steps.ffmpeg.outputs.releases }}
          EOF
          mk_delim() { local f='%s_EOF_%d_' ; printf -- "${f}" "$1" "${RANDOM}" ; } ;
          open_ml_var() { local f=''\%'s<<'\%'s\n' ; printf -- "${f}" "$2" "$1" ; } ;
          close_ml_var() { local f='%s\n' ; printf -- "${f}" "$1" ; } ;
          {
            var='FFMPEG_DATE' ;
            delim="$(mk_delim "${var}")" ;
            open_ml_var "${delim}" "${var}" ;
            jq_arg='[foreach .[] as $release ([{}, []]; [ .[0] + {($release.commit): ([ $release.date ] + (.[0][($release.commit)] // []) ) }, [ .[1][0] // $release.commit ] ] ; .[0][(.[1][0])] ) ][-1][0]' ;
            jq -r "${jq_arg}" -- .ffmpeg.releases.json ;
            close_ml_var "${delim}" "${var}" ;

            ffmpeg_date="$( jq -r "${jq_arg}" -- .ffmpeg.releases.json )"
            
            var='FFMPEG_VERSION' ;
            delim="$(mk_delim "${var}")" ;
            open_ml_var "${delim}" "${var}" ;
            jq_arg='.[]|select(.date == $date)|.versions[]|select(startswith("N-"))' ;
            jq -r --arg date "${ffmpeg_date}" "${jq_arg}" -- .ffmpeg.releases.json ;
            close_ml_var "${delim}" "${var}" ;
            unset -v delim jq_arg var ;
          } >> "${GITHUB_OUTPUT}"
          cat -v "${GITHUB_OUTPUT}"
          rm -v -f .ffmpeg.releases.json

  containerise:
    needs: ['info']
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.REGISTRY_ACCESS_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ needs.info.outputs.lowercase-github-actor }}/${{ env.IMAGE_NAME }}:${{ needs.info.outputs.tag }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ needs.info.outputs.lowercase-github-repository_owner }}/${{ env.IMAGE_NAME }}:latest
            type=gha
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            FFMPEG_DATE=${{ needs.info.outputs.ffmpeg-date }}
            FFMPEG_VERSION=${{ needs.info.outputs.ffmpeg-version }}
            YTDLP_DATE=${{ fromJSON(needs.info.outputs.ytdlp-latest-release).tag.name }}
