name: 'FFmpeg Builds'
description: 'Use GitHub CLI & API to retrieve information about FFmpeg Build releases.'

inputs:
  token:
    required: true
    default: ${{ github.token }}
    description: |
      GH_TOKEN for GitHub CLI to use.
      Default: `\$\{\{ github.token \}\}`
  num-assets:
    required: true
    default: '25'
    description: |
      The number of assets (attached files) to retrieve from each release.
      Default: 25
  num-releases:
    required: true
    default: '35'
    description: |
      The number of releases to retrieve from the repository.
      Default: 35
  repository_owner:
    required: true
    default: 'yt-dlp'
    description: |
      The name of the user or organization that owns the repository.
      Default: 'yt-dlp'
  repository_name:
    required: true
    default: 'FFmpeg-Builds'
    description: |
      Which repository from the owner to search for releases.
      Default: 'FFmpeg-Builds'

outputs:
  releases:
    value: ${{ steps.set.outputs.releases }}
    description: 'Generated JSON describing the released builds.'

runs:
  using: 'composite'
  steps:
    - name: Retrieve releases
      id: 'set'
      env:
        GH_TOKEN: ${{ inputs.token }}
        GH_REPO: '${{ inputs.repository_owner }}/${{ inputs.repository_name }}'
        GH_API_GQL_ASSETS: '${{ inputs.num-assets }}'
        GH_API_GQL_RELEASES: '${{ inputs.num-releases }}'
        GH_API_GQL_OWNER: '${{ inputs.repository_owner }}'
        GH_API_GQL_REPO: '${{ inputs.repository_name }}'
      shell: 'bash'
      run: |
        command -v gh >/dev/null ;
        command -v jq >/dev/null ;
        gql_query='query($repo: String!, $owner: String!, $releases: Int!, $assets: Int!) { repository(owner: $owner, name: $repo) { releases(first: $releases, orderBy: { field: CREATED_AT, direction: DESC }) { nodes { tagName, isDraft, isPrerelease, isLatest, tag { name, target { oid, commitUrl } }, releaseAssets(first: $assets) { totalCount, nodes { name, size, downloadUrl } } } } } }' ;
        gql_jq='[ .data.repository.releases.nodes[] | select((.isLatest or .isDraft or .isPrerelease) | not) | { "tag": .tag.name, "commit": .tag.target.oid, "date": .tag.name[1+(.tag.name|index("-")):], "assets": { "limit": '"${GH_API_GQL_ASSETS}"', "totalCount": .releaseAssets.totalCount }, "files": .releaseAssets.nodes, "versions": [ .releaseAssets.nodes[].name | select(contains("-linux64-"))[1+index("-"):index("-linux64-")] ] } ]' ;
        mk_delim() { printf -- '"%s_EOF_%d_"' "$1" "${RANDOM}" ; } ;
        open_ml_var() { local f=''\%'s<<'\%'s\n' ; printf -- "${f}" "$2" "$1" ; } ;
        close_ml_var() { local f='%s\n' ; printf -- "${f}" "$1" ; } ;
        {
          var='releases' ;
          delim="$(mk_delim "${var}")" ;
          open_ml_var "${delim}" "${var}" ;
          gh api graphql --cache 12h \
            -F assets="${GH_API_GQL_ASSETS}" \
            -F owner="${GH_API_GQL_OWNER}" \
            -F repo="${GH_API_GQL_REPO}" \
            -F releases="${GH_API_GQL_RELEASES}" \
            -f query="${gql_query}" --jq "${gql_jq}" ;
          close_ml_var "${delim}" "${var}" ;
          unset -v delim jq_arg var ;
        } >> "${GITHUB_OUTPUT}" ;
        # Log the human version
        gh api graphql --cache 12h \
          -F assets="${GH_API_GQL_ASSETS}" \
          -F owner="${GH_API_GQL_OWNER}" \
          -F repo="${GH_API_GQL_REPO}" \
          -F releases="${GH_API_GQL_RELEASES}" \
          -f query="${gql_query}" --jq "${gql_jq}" | jq '.[]' -- ;
